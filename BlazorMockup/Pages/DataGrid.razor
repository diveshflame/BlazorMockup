@using System.Net.Http.Json
@inject HttpClient httpClient
@using MudBlazor
@using BlazorMockup.Model
@using BlazorMockup.ViewModel
@using BlazorMockup.DataWarehouse
@implements IDisposable
@inject IDataStore _dataStore

<MudDataGrid T="Examination" MultiSelection="true" Height="342px" HeaderClass="custom-datagrid"
            Items="@FilteredExaminations" Hover="true" Striped="@true" Bordered="true"
             RowStyleFunc="@_rowStyleFunc" Filterable="false" ShowFilterIcons="false"
              SortMode="@SortMode.Single" Groupable="false"
              @bind-SelectedItems="@SelectedExaminations" FixedHeader="true">


    <ToolBarContent>
        <MudText Typo="Typo.h6">Examinations</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"
                      DebounceInterval="300" OnDebounceIntervalElapsed="@(()=>OnSearch(_searchString))" />
    </ToolBarContent>

    <Columns>
        <SelectColumn T="Examination" />
        <PropertyColumn Property="x => x.Date" Title="Date" Format="dd.MM.yyyy"  HeaderClass="header-style"/>
        <PropertyColumn Property="x => x.ExaminationType" Title="Examination Type" HeaderClass="header-style"/>
        <PropertyColumn Property="x => x.Weight" Title="Weight" Sortable="false" HeaderClass="header-style" />
        <PropertyColumn Property="x => x.HeadCircumference" Title="Head Circumference" Sortable="false" HeaderClass="header-style"/>
        <PropertyColumn Property="x => x.Height" Title="Height" Sortable="false" HeaderClass="header-style" />
        <PropertyColumn Property="x => x.Note" Title="Note" Sortable="false" HeaderClass="header-style">
            <CellTemplate Context="context">
                <MudTooltip Text="@context.Item.Note">
                    <MudText Typo="Typo.body2" Class="text-ellipsis">@context.Item.Note</MudText>
                </MudTooltip>
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn class="w-[10px]"  StickyRight="true" HeaderClass="header-style">
            <CellTemplate >
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small"  />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
<style>
    .header-style {
        background-color: #EDF2F1 !important;
    }
    .mud-table{border-width: 1px;}

    .mud-table thead th:first-child {
        background-color: #EDF2F1 !important;
        color: #727373 !important;
    }

</style>
@code {
    private string _searchString;
    private HashSet<Examination> SelectedExaminations = new HashSet<Examination>();
    private List<Examination> Examinations = new List<Examination>();
    [Inject] private ExaminationEventService ExaminationEventService { get; set; }

    private Func<Examination, int, string> _rowStyleFunc => (x, i) =>
    {
        if (x.Date.Date == DateTime.Now.Date)
            return "font-style:italic";

        return "";
    };

    private IEnumerable<Examination> FilteredExaminations => string.IsNullOrWhiteSpace(_searchString)
        ? Examinations
        : Examinations.Where(x =>
            x.Date.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.ExaminationType.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Weight.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.HeadCircumference.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Height.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Note.Contains(_searchString, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        ExaminationEventService.ExaminationSaved += HandleExaminationSaved;
        await LoadExaminations();
    }

    private async void HandleExaminationSaved(object sender, EventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await LoadExaminations();
        });
    }

    public void Dispose()
    {
        ExaminationEventService.ExaminationSaved -= HandleExaminationSaved;
    }

    private async Task LoadExaminations()
    {
        var examinations = await _dataStore.GetExaminationsAsync();
        Examinations = new List<Examination>(examinations);
        StateHasChanged();
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        StateHasChanged();
    }
}